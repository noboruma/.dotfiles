# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) 
	{
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} 
	{
		${2}
	} //!$1
# Class
snippet cl
	class ${1:`Filename('$1_t', 'name')`} 
	{
	public:
		$1 (${2:arguments});
		virtual ~$1 ();

	private:
		${3:/* data */}
	};
snippet struct
	struct ${1:`Filename('$1_t', 'name')`}
	{
		$1 (${2:arguments});
		~$1 ();

		private:
			${3:/* data */}
	};
# For each i
snippet fori
	for (unsigned ${2:i} = 0; $2 < ${1:count}; $2${3:++}) 
	{
		${4:/* code */}
	}

# For each i as auto
snippet fora
	for (auto &${1:i} : $2) 
	{
		${3:/* code */}
	}

# For each i as size_t
snippet fors
	for (unsigned ${1:i} = 0; $1 < ${2:.size()}; ${3:++}$1) 
	{
		${4}
	}

# Cout
snippet cout
	std::cout<<${1}<<std::endl;
