*indexer.txt* Plugin for automatically index project files using ctags
              and keep tags up-to-date.
              For Vim 7.x version



                     By Dmitry Frank
                  dimon.frank@gmail.com

Firstly: if you have any questions about this plugin, feel free
to email me: dimon.frank@gmail.com


                                          *indexer* *indexer-plugin*
   Contents:

     Dependencies..........................|indexer-dependencies|
     Options....................................|indexer-options|
     Commands..................................|indexer-commands|
     Background..............................|indexer-background|
     Debug commands......................|indexer-debug-commands|
     Known bugs....................................|indexer-bugs|
     Troubleshooting....................|indexer-troubleshooting|
     Syntax change in 4.10..............|indexer-syn-change-4.10|
     Thanks......................................|indexer-thanks|


Please note: there's some dependencies. Please read |indexer-dependencies|.

                                  * * *

You can use this plugin to automatically index your project files 
using ctags. This can be very useful when it's used together with plugins
omnicppcomplete (for c, c++ development), code_complete.vim
and other plugins that using tags.
You also will able to jump from function call to its definition 
just by pressing Ctrl-] or g]

This plugin can work as add-on for project.tar.gz plugin. 
Indexer reads project file, parses it and builds tags for all files 
in project. But it can also work without this plugin.

Actually, if you use project.vim plugin and your projects file is
default (~/.vimprojects), then setting indexer up is very easily: 
you can just copy indexer.vim to your plugins directory, start Vim 
and open any file from your project.
The Indexer will detect that opened file from project 
and automatically start ctags (in background) for each file in this 
project. It also set &path and &tags options for Vim.

If you use project.vim but you have another projects file,
you should set option g:indexer_projectsSettingsFilename in your
vimrc. See |indexer-options| for details

If you don't use project.vim then you can use ".indexer_files" to 
define projects to index. 
Default location of this file is "~/.indexer_files". You can change
it by modifying variable g:indexer_indexerListFilename

Note that this file overrides "~/.vimprojects". If both files exists
only "~/.indexer_files" will be used.

Syntax of this file is quite easy. Probably the best way to explain it
is to show an example.

NOTE! Since Indexer 4.10 syntax of .indexer_files is changed a bit,
to make ctags work much more effectifely.
However, old syntax will work too, for backward compatibility.
You can read detailed info about changes here: |indexer-syn-change-4.10|.

Example file "~/.indexer_files" >
   [CoolProject]

   /home/user/cool_project

   [AnotherProject]
   option:ctags_params = "--languages=c++"

   /home/user/another_project/src
   /home/user/another_project/lib

I hope all is obvious:
there's two projects: CoolProject and AnotherProject.
CoolProject just contains ALL files from "/home/user/myproject".
AnotherProject is configured more complicated.
It specifies additional parameter for ctags: "--languages=c++".
It is needed to make ctags ignore all files except c++ sources.
I would recommend you to read and understand ctags help, to be able to write
perfect configuration for your projects.
You can read it here: http://ctags.sourceforge.net/ctags.html
The options you need to know first is the following two: >
   --languages=[+|-]<list>
   --langmap=<map>[,<map[...]>]

If you have many projects and you are lazy to put every project in
this file, you can put in your ~/.indexer_files something like this:

      >
   [PROJECTS_PARENT]
   option:ctags_params="--languages=c++,c,python,java"

   ~/workspace

The keyword is PROJECTS_PARENT.
In this way, every directory in ~/workspace will be interpreted as project,
and you can open any file from any project in ~/workspace, and the 
whole proper project will be indexed.


Indexer 3.0 and later supports open several files from several 
projects. For example, a little story.

You have two projects: "project1" and "project2", and you use
"~/.indexer_files".

1) you open file1 from project1. 
   Indexer generates tags for all files from project1 and set &tags:
   ~/.indexer_files_tags/project1
2) you open file2 from the same project1.
   Indexer just notes that file2 is file from project1. 
   &tags does not change.
3) you open file3 from project2.
   Indexer generates tags for all files from project2 and set &tags:
   ~/.indexer_files_tags/project2.
4) you switch to buffer with file1.
   Indexer does not generate any tags, it will just change &tags to
   ~/.indexer_files_tags/project1
5) you switch to buffer with file3.
   Indexer changes &tags back to ~/.indexer_files_tags/project2 .

So, you should not care about your projects. It just works. If you
have some projects with subprojects, i recommend you to use .vimprj directory
with specific settings for your project, in which you can set any 
options such as &tags, &tabstop, etc. More detailed: read :help vimprj

Actually, Indexer sets &path for needed project when you swith to new 
buffer, not only &tags.

                                                         *indexer-background*
Please NOTE: tags generate in background if only servername
is not empty. (if you don't know what is servername, please read
:help servername). Otherwise tags generate in Vim thread, and you need
to wait while ctags work.

If you use Gvim, then servername is "GVIM" by default (if all is ok), 
and so, background tags generation should work in Gvim "out of the box".
If you use console vim, you need to run vim somehow like that:

$ vim --servername MY_NAME

actually, you can make alias for this command, or something.

If servername is empty, then plugin will work anyway, but you need
to wait while ctags work. This is not really bad at rather small projects.


========================================================================
DEPENDENCIES                                        *indexer-dependencies*

You need to download the following scripts to work with this plugin:

Vimprj         ( http://www.vim.org/scripts/script.php?script_id=3872 )
DfrankUtil     ( http://www.vim.org/scripts/script.php?script_id=3884 )

========================================================================
OPTIONS                                                  *indexer-options*

You can set these variables in your vimrc file before the plugin is loaded to
change its default behavior

                                               *indexer_indexerListFilename*
g:indexer_indexerListFilename (default: "~/.indexer_files")

   indexer filename. If this file exists then projects file are ignored.

                                           *indexer_projectsSettingsFilename*
g:indexer_projectsSettingsFilename (default: "~/.vimprojects")

   project filename. (the project file that plugin project.vim using)

                                                        *indexer_projectName*
g:indexer_projectName (default: '')

   if you don't wand to index any project, you can define one name.
   If it is empty, then indexes any found projects.
   By default is empty.

                                          *indexer_enableWhenProjectDirFound*
g:indexer_enableWhenProjectDirFound (default: 1)

   If this option is set, then if Vim started from project directory, this project
   will be indexed. Otherwise project will be indexed only if there's file 
   from this project opened 

                                                       *indexer_tagsDirname*
g:indexer_tagsDirname (default: "")

   directory to save tags file. If empty (by default), then using following:
   For example, you use file ~/.indexer_files, then tags will be in 
   ~/.indexer_files_tags/<project_name>, where <project_name> is name of
   your project =). 
   
   if not empty (for example, "/home/user/mytags"), then tags will be in files
   /home/user/mytags/_home_user__indexer_files_<project_name>.

   I recommend to use default.

                                            *indexer_ctagsCommandLineOptions*
g:indexer_ctagsCommandLineOptions

   ctags command line options. By default is: 
   "--c++-kinds=+p+l --fields=+iaS --extra=+q"

                                      *indexer_ctagsJustAppendTagsAtFileSave*
g:indexer_ctagsJustAppendTagsAtFileSave 
   (default: 1 for non-Windows (for example, Linux) , 0 for Windows)

   At each save of file from project, we need to update tags.
   If this option is on, then ctags will be started just for 
   current file with "-a" key, otherwise tags for all project 
   files will be rebuild.

   BTW, there's option g:indexer_useSedWhenAppend, and when it
   is on, then old tags removes from tags file before append.

   But at Windows all versions of Sed i have seen is buggy. 
   Because of this i made default value 0 on Windows systems.

   Actually, complete rebuild of all tags is not a problem, 
   because of tags generates in background, and you do not need
   to wait while ctags is working.
   

                                                  *indexer_ctagsWriteFilelist*
g:indexer_ctagsWriteFilelist (default: 1)

   Added in Indexer 4.10.

   When 1, filelist is generated, saved into file and passed to ctags
   with "-L" key instead of passing all the files via command line.
   File is stored in the same dir as tags file.
   This is very useful on large projects, if there are too many files and
   in Indexer < 4.10 we needed to call ctags several times with "-a" key,
   which works slower.
   
   When 0, all the files is passed to ctags directly via command line.
   To be honest, i can't find the reason why you might want to set this option
   to 0.


                                      *indexer_ctagsDontSpecifyFilesIfPossible*
g:indexer_ctagsDontSpecifyFilesIfPossible (possible values: -1, 0, 1; default: -1)

   Please NOTE: since Indexer 4.10 this option is deprecated a bit, because
   there's really no reasons to use non-default value.
   1) When used together with project.tar.gz plugin, we need to use files,
      and since Indexer 4.10 if works as fast as with dirs, because files is
      stored in separate file and ctags is called with -L key.
   2) When used with .indexer_files, then we should use dirs mode, because
      expanding wildcards is expensive operation, and since Indexer 4.10 you
      can define file filters in options:ctags_params, which works very fast.

   ---

   When this option is 1, only project roots is passed to ctags with "-R" key.

   When this option is 0, each file is passed to ctags.

   When this option is -1, then with .indexer_files it behaves like 1,
   but with .vimprojects it behaves like 0.

                                                    *indexer_maxOSCommandLen*
g:indexer_maxOSCommandLen (default: OS depending)
   
   Shell command line length limitation.
   By default:
   At Windows this is 8000.
   At Linux this is getting by command:
   $ echo $(( $(getconf ARG_MAX) - $(env | wc -c) ))

   This is needed for executing ctags. If command with all files is too long,
   then several command will be executed, with "-a" key.
   NOTE: You need patched ctags 5.8.1 to make it work correctly with C/C++ files!
   Because of bug in ctags 5.8, you can read details about this bug and download 
   patched version here: http://dfrank.ru/ctags581/en.html

   Or use this direct links to download:
   Linux source (gzipped): http://dfrank.ru/download?f=ctags/ctags581
   Patch for version 5.8: http://dfrank.ru/download?f=ctags/patch_ctags_581.patch
   Windows binary: http://dfrank.ru/download?f=ctags/ctags.zip

                                                   *indexer_useSedWhenAppend*
g:indexer_useSedWhenAppend (default: 1)

   This option uses only when g:indexer_ctagsJustAppendTagsAtFileSave is ON.
   If 1, then at filesave from tags file will be removed all tags from
   saved file, and then new tags will be appended by ctags.

   This is needed to exclude garbage (obsolete tags) in tags file.
   
   NOTE: If you using Windows, then the better way is not to use sed,
   because of all Windows versions of Sed i have seen is buggy. 
   Read |indexer_ctagsJustAppendTagsAtFileSave| for details.
   

                                                 *indexer_backgroundDisabled*
g:indexer_backgroundDisabled (default: 0)
   
  If 0 (by default), then tags generate in background (if possible. see |indexer-background|)
  If non-zero, then tags always generate in Vim thread. 

  This option is added as a possible trouble-shoot. For instance, on Windows 7
  there was some problems with background tags generation. These troubles
  is solved in Indexer 3.14, but i don't know where i face same 
  troubles again =)

                                                      *indexer_vimExecutable*
g:indexer_vimExecutable (default: '*auto*')

  Indexer needs to execute Vim when tags generation is done, to achieve
  background asynchronous tags generation.

  If this variable has default value '*auto*', then Indexer will try to detect
  executable name automatically: on MacVim it should be "mvim", on all other 
  systems it should be "vim".

  If you need your custom vim to be executed, specify it in this variable.
   

                                                      *indexer_debugLogLevel*
g:indexer_debugLogLevel (default: 0)

  debug log level.

  Levels available:

  0: log is disabled
  1: operations with tags is logged
  2: operations with tags and projects is logged
  3: all possible debug info is logged

  You can see log by typing :IndexerDebugLog
  You can save complete debug snapshot by typing :IndexerDebugSave

                                                  *indexer_debugLogFilename*
g:indexer_debugLogFilename (default: "")

  if not empty and if debug level > 0, then all log writes into this file.

========================================================================
COMMANDS                                                  *indexer-commands*

:IndexerInfo
   
   prints information about current state of plugin, such as projects file
   using, files not found, and other.

   The first thing you should do if plugin doesn't work is type this command :)

:IndexerFiles

   prints list of indexed files

:IndexerRebuild

   rebuild tags for all files in project

                                                          *indexer-debug-commands*
:IndexerDebugLog

   prints debug log.
   Note: you need to specify log level by modifying variable g:indexer_debugLogLevel
   Max log level is 3 (all info)
   Min log level is 0 (log disabled. default)
   
:IndexerDebugSave

   prompts for filename and saves debug snapshot to file.
   
:IndexerDebugInfo

   prints some debug information. (Not very detailed at this moment)


========================================================================
KNOWN BUGS                                                *indexer-bugs*

*) If you edited .indexer_files or .vimprojects and you renamed your project,
   then you will get errors until Vim is restarted.
*) If ctags becomed hung, then all your tags generation is silently broken 
   until Vim is restarted.
   I myself found that ctags becomes hung while parsing several *.vim files.


========================================================================
TROUBLESHOOTING                                *indexer-troubleshooting*

There's no normal troubleshooting manual written yet ;)

Well, if you have troubles, please do the following:

*) put in your vimrc following line:
      let g:indexer_debugLogLevel = 2
*) close Vim, open it again and reproduce the trouble.
*) type:
      :IndexerDebugSave
   and enter filename to save snapshot (for instance, ~/vim_dbg.txt)
*) send to me resulting snapshot file, provide detailed info 
   about troubles

*) don't forget to set g:indexer_debugLogLevel = 0 again, to avoid
   useless memory allocation.


========================================================================
SYNTAX CHANGES IN 4.10                         *indexer-syn-change-4.10*

Since Indexer 4.10 syntax of .indexer_files is changed a bit,
to make ctags settings much more effectife.
However, old syntax will work too, for backward compatibility.

Overview of changes:

No more need to define something like "**/*.c". I mean, you need
to write this: >
   /home/user/myproject
Instead of this: >
   /home/user/myproject**/*.c
   /home/user/myproject**/*.h

To declare these filters, please use additional ctags params.
For instance, if you have C project, you can declare it like that: >
   [My_C_project]
   option:ctags_params = "--langmap=c:.c.h --languages=c"

   /path/to/c/project

And that's it. For C++ project that's a bit easier: >

   [My_Cpp_project]
   option:ctags_params = "--languages=c++"

   /path/to/cpp/project

You have not to define "--langmap" here because default ctags langmap for C++
already includes many file extensions. See all mappings by typing >
   ctags --list-maps

Yes, you need to read ctags help to be able to write efficient config for
Indexer. I would recommend you to examine firstly these two options: >
   --languages=[+|-]<list>
   --langmap=<map>[,<map[...]>]
You can read ctags help here: http://ctags.sourceforge.net/ctags.html

Please note: suggested ctags options is tested with ctags 5.8. As far as i
know, option --languages is marked as deprecated in ctags 5.9, but i still did
not test it, because the latest version on http://ctags.sourceforge.net is
still 5.8. I hope i will have time for this soon.

Filters in PROJECTS_PARENT is also not needed now.
Actually (between ourselves) all these filters (in usual projects and
in PROJECTS_PARENT) were ignored by default! I'm sorry about that, but 
that's because to apply these filters we need to expand all wildcards 
directly in Vim, and this takes really much time on large projects, so, 
Indexer just passed to ctags root directory, and ctags worked with it in 
background.
Unfortunately ctags can't take filename wildcards like "*.c", so, it works
simply without any filters.

To apply old-school filters you needed to manually set the following option: >
   let g:indexer_ctagsDontSpecifyFilesIfPossible = 0
And Indexer will work slower then.

But now you can control it by specifying options:ctags_params. 
I hope you like it.

By the way, if you have g:indexer_ctagsDontSpecifyFilesIfPossible specified
by hand, then you probably should remove it since Indexer 4.10.
Read this: |indexer_ctagsDontSpecifyFilesIfPossible|.

You can declare several [PROJECTS_PARENT] items with special ctags_params
in each project parent. Just like that: >

   [PROJECTS_PARENT]

   option:ctags_params="--langmap=c:.c.h --languages=c"
   /home/user/projects/c

   option:ctags_params="--languages=c++"
   /home/user/projects/cpp

You can always see the last ctags command by typing >
   :IndexerDebugInfo

========================================================================
THANKS                                                  *indexer-thanks*

There's some people i'd like to say thanks for help with make Indexer better:

* Makoto Nokata
* Julian Kooij
* Alexander Q
* Torkve
* Dan Price
* Thiago Bellini
* Shi Haipend 
* Alexander Pazdnikov
* Asis Hallab

 vim:ft=help:tw=78:  
